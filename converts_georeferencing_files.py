# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Converter
                                 A QGIS plugin
 converts georeferencing files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Alexzander/Roslesinforg
        email                : travin1995@inbox.ru
 ***************************************************************************/
"""
import os.path
import os
import re

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import QgsProject, QgsRasterLayer, QgsCoordinateReferenceSystem, QgsFeature

from .resources import *
# Import the code for the dialog
from .converts_georeferencing_files_dialog import ConverterDialog


class Converter:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Converter_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Converts georeferencing files')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Converter', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/converts_georeferencing_files/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'converts georeferencing files'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Converts georeferencing files'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_files(self):
        filenames = QFileDialog.getOpenFileNames(self.dlg, 'Open file', '', '"Файл (*.TAB *.OMG *.CPT *.JPG)')[0]
        for singlefile in filenames:
            self.dlg.textEdit.append(singlefile)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ConverterDialog()
            self.dlg.pushButton.clicked.connect(self.select_files)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed

        if result:
            list = self.dlg.textEdit.toPlainText()
            self.dlg.textEdit.clear()
            lst = list.split('\n')
            for filename in lst:
                if filename[-4:] == '.tab':
                    # stopword = '! --------------------------------------------\n'
                    stop = 1
                    index = 26
                    label = 1
                    with open(filename, 'r', encoding='cp1251') as f:
                        x = f.readlines()
                        _6_ = x[6]
                        _7_ = x[7]
                        spisok = []
                        # Алгоритм преобразования всех точек, решено отказаться из-за невязки
                        # while True:
                        #     mark = x[index]
                        #     if mark == stop:
                        #         break
                        #     else:
                        while stop < 5:
                            line = re.findall(r'[\d\.\s]', x[index])
                            line[1] = "("
                            line[12] = ","
                            del line[13]
                            line[22] = ")"
                            del line[23]
                            line[24] = "("
                            line[32] = ","
                            del line[33]
                            del line[33]
                            del line[33]
                            line[40] = ")"
                            line.append(f' Label "Ref. point #{label}",\n')
                            text = "".join(line[1:])
                            spisok.append(text)
                            index = index + 1
                            label = label + 1
                            stop += 1
                    with open(filename, 'w', encoding='cp1251') as f:
                        text = (_6_,
                                _7_,
                                'Type "RASTER"\n')
                        f.writelines(text)
                        f.writelines(spisok)
                if filename[-4:] == '.cpt':
                    index = 0
                    label = 1
                    with open(filename, 'r', encoding='UTF-8') as f:
                        x = f.readlines()
                        x.append('STOP')
                        spisok = []
                        while True:
                            mark = x[index]
                            if mark == 'STOP':
                                break
                            else:
                                line = x[index]
                                line = line[:-1]
                                line = line.split(' ')
                                block = ['(', line[2], ',', line[3], ')', ' ', '(', line[0], ',', line[1], ')',
                                         f'Label "Ref. point #{label}",',
                                         '\n']
                                block = "".join(block)
                                spisok.append(block)
                                index = index + 1
                                label = label + 1
                    with open(filename[:-4] + '.tab', 'w') as f:
                        text = ('Definition Table\n',
                                'File "Easy.JPG"\n',
                                'Type "RASTER"\n')
                        f.writelines(text)
                        f.writelines(spisok)
                if filename[-4:] == '.omg':
                    stop = 1
                    index = 8
                    label = 1
                    with open(filename, 'r', encoding='cp1251') as f:
                        x = f.readlines()
                        spisok = []
                        spisok.append(x[6])
                        spisok.append(x[7])
                        spisok.append('Type "RASTER"\n')
                        # while True:
                        #   mark = x[index]
                        #   if mark == 'Units "CM"\n':
                        #     break
                        while stop < 5:
                            line = x[index]
                            line = line.split(' ')
                            block = line[0]
                            block = block.split(',')
                            number1 = block[0]
                            number1 = number1[1:]
                            number1 = (float(number1) / 100)
                            number2 = block[1]
                            number2 = number2[:-1]
                            number2 = (float(number2) / 100)
                            block2 = ['(', str(number1), ',', str(number2), ') ', line[1],
                                      f' Label "Ref. point #{label}",\n']
                            block2 = "".join(block2)
                            spisok.append(block2)
                            index = index + 1
                            label = label + 1
                            stop += 1
                    with open(filename[:-4] + '.tab', 'w', encoding='cp1251') as f:
                        f.writelines(spisok)
                raster_layer = filename[:-4] + '.jpg'
                layername = filename.rpartition('/')[2]
                layername = layername[:-4]
                # установка СК проекта
                crs = QgsProject.instance().crs()
                print(crs)
                rlayer = QgsRasterLayer(raster_layer, layername, "gdal", crs=QgsProject.instance().crs())
                if not rlayer.isValid():
                    print("Layer failed to load!")
                else:
                    # открытие растров по завершении
                    QgsProject.instance().addMapLayer(rlayer)
            proj_msg = QMessageBox()
            proj_msg.setWindowTitle("Completed!")
            proj_msg.setText(
                "Растры привязаны. Файлы привязки перезаписаны.")
            proj_msg.exec_()
        else:
            self.dlg.textEdit.clear()
